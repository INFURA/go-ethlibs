package eth_test

import (
	"encoding/json"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/INFURA/go-ethlibs/eth"
)

func TestMainnetGethUncles(t *testing.T) {
	payload := `{"difficulty":"0x4bff7b98aad","extraData":"0x476574682f76312e302e322f77696e646f77732f676f312e342e32","gasLimit":"0x2fefd8","gasUsed":"0x0","hash":"0xb1921cff42e03d5fbbec659f290cc2d8e90857c588d6b277203f455cf36d04af","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","miner":"0x9746c7e1ef2bd21ff3997fa467593a89cb852bd0","mixHash":"0x2b65d50c9c904fd0e2c828ffd570b1d22909927372704f9b33f619c533c0b64d","nonce":"0xe53e2848fe88f286","number":"0x21952","parentHash":"0x72931c847950a8182e1cb4ff3b6812414827437006ed9a24b82dd802ac6185d9","receiptsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","size":"0x220","stateRoot":"0xc9519b35272d4db83d167524eb4d0f6b4c21ffa8796171bdf7c6c5200b7e2c30","timestamp":"0x55db7e57","totalDifficulty":null,"transactionsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","uncles":[]}`
	var uncle eth.Uncle

	err := json.Unmarshal([]byte(payload), &uncle)
	require.NoError(t, err, "mainnet geth uncle should deserialize")

	require.Equal(t, 0, len(uncle.Transactions))
	require.Equal(t, "0x21952", uncle.Number.String())
	require.Equal(t, eth.Data("0x476574682f76312e302e322f77696e646f77732f676f312e342e32"), uncle.ExtraData)
	require.Nil(t, uncle.TotalDifficulty)

	j, err := json.Marshal(&uncle)
	require.NoError(t, err)

	RequireEqualJSON(t, []byte(payload), j)
}

func TestMainnetParityUncles(t *testing.T) {
	payload := `{"author":"0x9746c7e1ef2bd21ff3997fa467593a89cb852bd0","difficulty":"0x4bff7b98aad","extraData":"0x476574682f76312e302e322f77696e646f77732f676f312e342e32","gasLimit":"0x2fefd8","gasUsed":"0x0","hash":"0xb1921cff42e03d5fbbec659f290cc2d8e90857c588d6b277203f455cf36d04af","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","miner":"0x9746c7e1ef2bd21ff3997fa467593a89cb852bd0","mixHash":"0x2b65d50c9c904fd0e2c828ffd570b1d22909927372704f9b33f619c533c0b64d","nonce":"0xe53e2848fe88f286","number":"0x21952","parentHash":"0x72931c847950a8182e1cb4ff3b6812414827437006ed9a24b82dd802ac6185d9","receiptsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","sealFields":["0xa02b65d50c9c904fd0e2c828ffd570b1d22909927372704f9b33f619c533c0b64d","0x88e53e2848fe88f286"],"sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","size":null,"stateRoot":"0xc9519b35272d4db83d167524eb4d0f6b4c21ffa8796171bdf7c6c5200b7e2c30","timestamp":"0x55db7e57","totalDifficulty":"0x4c19807e6458d37","transactions":[],"transactionsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","uncles":[]}`

	var uncle eth.Uncle

	err := json.Unmarshal([]byte(payload), &uncle)
	require.NoError(t, err, "mainnet parity uncle should deserialize")

	require.Equal(t, 0, len(uncle.Transactions))
	require.Equal(t, "0x21952", uncle.Number.String())
	require.Equal(t, "0x9746c7e1ef2bd21FF3997fa467593a89cb852BD0", uncle.Author.String())
	require.Equal(t, eth.Data("0x476574682f76312e302e322f77696e646f77732f676f312e342e32"), uncle.ExtraData)
	require.Equal(t, eth.MustQuantity("0x4c19807e6458d37"), uncle.TotalDifficulty)
	require.NotNil(t, uncle.SealFields)
	require.Len(t, *uncle.SealFields, 2)
	require.Equal(t, []eth.Data{
		*eth.MustData("0xa02b65d50c9c904fd0e2c828ffd570b1d22909927372704f9b33f619c533c0b64d"),
		*eth.MustData("0x88e53e2848fe88f286"),
	}, *uncle.SealFields)

	j, err := json.Marshal(&uncle)
	require.NoError(t, err)

	RequireEqualJSON(t, []byte(payload), j)
}

func TestKovanParityUncles(t *testing.T) {
	payload := `{"author":"0x00427feae2419c15b89d1c21af10d1b6650a4d3d","difficulty":"0xfffffffffffffffffffffffffffffffd","extraData":"0xd5830107008650617269747986312e31382e30826c69","gasLimit":"0x6ab50e","gasUsed":"0x0","hash":"0xe7e6d1bdb4b8971187031e1bbe277b93386985bf2a4c19adb87d904b3967b35d","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","miner":"0x00427feae2419c15b89d1c21af10d1b6650a4d3d","number":"0x4d50dc","parentHash":"0x3b88124c3e6126b9c3351e10e8132788b175cf86f7f3e4dbd71a71d837e92141","receiptsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","sealFields":["0x84168c81dc","0xb841d4ca120613fba047f96e23b19886aeaa153eed0b902b161daad729be87c2f3390591dca22629ee8b6c80464b6c01f2efee063eb5add36cc6e655dfe236fb5cf001"],"sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","signature":"d4ca120613fba047f96e23b19886aeaa153eed0b902b161daad729be87c2f3390591dca22629ee8b6c80464b6c01f2efee063eb5add36cc6e655dfe236fb5cf001","size":null,"stateRoot":"0xd7f26b52a8b089fa33f8c43722b4845bfa646e4073703b0627b25e48d3a49689","step":"378307036","timestamp":"0x5a32076f","totalDifficulty":"0x4b0dcd000000000000000000000004857d1e71","transactions":[],"transactionsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","uncles":[]}`

	var uncle eth.Uncle
	err := json.Unmarshal([]byte(payload), &uncle)
	require.NoError(t, err, "kovan parity uncle should deserialize")

	require.Equal(t, 0, len(uncle.Transactions))
	require.Equal(t, "0x4d50dc", uncle.Number.String())
	require.Equal(t, "0x00427FEaE2419C15b89D1C21af10D1b6650A4d3D", uncle.Author.String())
	require.Equal(t, eth.Data("0xd5830107008650617269747986312e31382e30826c69"), uncle.ExtraData)
	require.Equal(t, eth.MustQuantity("0x4b0dcd000000000000000000000004857d1e71"), uncle.TotalDifficulty)
	require.NotNil(t, uncle.Step)
	require.Equal(t, "378307036", *uncle.Step)
	require.NotNil(t, uncle.Signature)
	require.Equal(t, "d4ca120613fba047f96e23b19886aeaa153eed0b902b161daad729be87c2f3390591dca22629ee8b6c80464b6c01f2efee063eb5add36cc6e655dfe236fb5cf001", *uncle.Signature)
	require.NotNil(t, uncle.SealFields)
	require.Len(t, *uncle.SealFields, 2)
	require.Equal(t, []eth.Data{
		*eth.MustData("0x84168c81dc"),
		*eth.MustData("0xb841d4ca120613fba047f96e23b19886aeaa153eed0b902b161daad729be87c2f3390591dca22629ee8b6c80464b6c01f2efee063eb5add36cc6e655dfe236fb5cf001"),
	}, *uncle.SealFields)

	j, err := json.Marshal(&uncle)
	require.NoError(t, err)

	RequireEqualJSON(t, []byte(payload), j)
}
